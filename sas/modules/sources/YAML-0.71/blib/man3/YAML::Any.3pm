.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "YAML::Any 3"
.TH YAML::Any 3 "2010-01-03" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
YAML::Any \- Pick a YAML implementation and use it.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    use YAML::Any;
\&    $YAML::Indent = 3;
\&    my $yaml = Dump(@objects);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
There are several \s-1YAML\s0 implementations that support the Dump/Load \s-1API.\s0
This module selects the best one available and uses it.
.SH "ORDER"
.IX Header "ORDER"
Currently, YAML::Any will choose the first one of these \s-1YAML\s0
implementations that is installed on your system:
.PP
.Vb 5
\&    YAML::XS
\&    YAML::Syck
\&    YAML::Old
\&    YAML
\&    YAML::Tiny
.Ve
.SH "OPTIONS"
.IX Header "OPTIONS"
If you specify an option like:
.PP
.Vb 1
\&    $YAML::Indent = 4;
.Ve
.PP
And YAML::Any is using \s-1YAML::XS,\s0 it will use the proper variable:
\&\f(CW$YAML::XS::Indent\fR.
.SH "SUBROUTINES"
.IX Header "SUBROUTINES"
Like all the \s-1YAML\s0 modules that YAML::Any uses, the following subroutines
are exported by default:
.PP
.Vb 2
\&    Dump
\&    Load
.Ve
.PP
and the following subroutines are exportable by request:
.PP
.Vb 2
\&    DumpFile
\&    LoadFile
.Ve
.SH "METHODS"
.IX Header "METHODS"
YAML::Any provides the following class methods.
.IP "YAML::Any\->order;" 4
.IX Item "YAML::Any->order;"
This method returns a list of the current possible implementations that
YAML::Any will search for.
.IP "YAML::Any\->implementation;" 4
.IX Item "YAML::Any->implementation;"
This method returns the implementation the YAML::Any will use. This
result is obtained by finding the first member of YAML::Any\->order that
is either already loaded in \f(CW%INC\fR or that can be loaded using
\&\f(CW\*(C`require\*(C'\fR. If no implementation is found, an error will be thrown.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ingy döt Net <ingy@cpan.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2008. Ingy döt Net.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
.PP
See <http://www.perl.com/perl/misc/Artistic.html>
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 191:" 4
.IX Item "Around line 191:"
Non-ASCII character seen before =encoding in 'döt'. Assuming \s-1UTF\-8\s0
